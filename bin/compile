#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

function decomp() {
    gunzip -f $CACHE_DIR/$1 || fail Decompressing $1
  }

function fail() {
    say Build failure: $*
    step Log
    popd
    cat $BUILD_DIR/build.log
    exit 1
  }

function fetch() {
    wget -P $CACHE_DIR $URL/$1 2> /dev/null || fail Fetching $1
  }

indent() {
  sed -u 's/^/       /'
}

function say() {
    echo $* | sed -u 's/^/       /'
  }

function step() {
    echo -----\> $*
  }

function untar() {
    tar -C $CACHE_DIR -xf $CACHE_DIR/$1 || fail Extracting $1
    rm -f $CACHE_DIR/$1
  }

function untar_rt() {
    tar -C $CACHE_DIR/runtime -xf $CACHE_DIR/$1 || fail Extracting $1
    rm -f $CACHE_DIR/$1
}

say Well well

set -e
set -o pipefail

BIN_DIR=$(cd $(dirname $0); pwd)
ROOT_DIR=$(dirname $BIN_DIR)

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

DEFAULT_SWIFT_VERSION="3.0"
CLANG_VERSION=3.7.0
SWIFT_BUILD_CONFIGURATION="release"

if [ -f "ENV_DIR/SWIFT_BUILD_CONFIGURATION" ]; then
  SWIFT_BUILD_CONFIGURATION=`cat "$ENV_DIR/SWIFT_BUILD_CONFIGURATION"`
fi

mkdir -p "$CACHE_DIR"

source "$BIN_DIR/utils"
source "$BIN_DIR/steps/swiftenv"
source "$BIN_DIR/steps/swift"
source "$BIN_DIR/steps/clang"
source "$BIN_DIR/steps/hooks/pre_compile"
source "$BIN_DIR/steps/swift-build"
source "$BIN_DIR/steps/swift-install"

# Setup application environment
mkdir -p $BUILD_DIR/.profile.d

set-env PATH '$HOME/.swift-bin:$PATH'
set-env LD_LIBRARY_PATH '$HOME/.swift-lib'

source "$BIN_DIR/steps/hooks/post_compile"
