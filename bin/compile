#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -e
set -o pipefail

function say() {
    echo $* | sed -u 's/^/       /'
  }

function step() {
    echo -----\> $*
}

function fetch() {
    wget -P $CACHE_DIR $URL/$1 2> /dev/null || fail Fetching $1
}

function untar() {
    tar -C $CACHE_DIR -xf $CACHE_DIR/$1 || fail Extracting $1
    rm -f $CACHE_DIR/$1
  }

function untar_rt() {
    tar -C $CACHE_DIR/runtime -xf $CACHE_DIR/$1 || fail Extracting $1
    rm -f $CACHE_DIR/$1
}

function decomp() {
    gunzip -f $CACHE_DIR/$1 || fail Decompressing $1
  }

function fail() {
    say Build failure: $*
    step Log
    popd
    cat $BUILD_DIR/build.log
    exit 1
}

BIN_DIR=$(cd $(dirname $0); pwd)
ROOT_DIR=$(dirname $BIN_DIR)

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

DEFAULT_SWIFT_VERSION="3.0"
CLANG_VERSION=3.7.0
SWIFT_BUILD_CONFIGURATION="release"

if [ -f "ENV_DIR/SWIFT_BUILD_CONFIGURATION" ]; then
  SWIFT_BUILD_CONFIGURATION=`cat "$ENV_DIR/SWIFT_BUILD_CONFIGURATION"`
fi

step Make cache dir
mkdir -p "$CACHE_DIR"
say Ok

step Setup application environment
# Setup application environment
mkdir -p $BUILD_DIR/.profile.d
say Ok

step Generating profile script
mkdir $BUILD_DIR/.profile.d 2> $BUILD_DIR/build.log
if [ -d $BUILD_DIR/.profile.d ]; then
    true
  else
    fail Creating .profile.d dir
  fi
paths /app/.delta > $BUILD_DIR/.profile.d/perfect.sh || fail Saving perfect.sh
chmod a+x $BUILD_DIR/.profile.d/perfect.sh || fail chmod perfect.sh
say Ok

step Setting paths
. $BUILD_DIR/.profile.d/perfect.sh || fail Executing perfect.sh
say Ok

step Checking dependencies
if [ -f $CACHE_DIR/depends_done.$SCRIPT_VER ]; then
  say Dependencies cached
else
  say Ok
  step Fetching dependencies
  URL=http://www.perfect.org/_buildpack
  fetch cedar14-uuid-dev.tar.gz
  fetch cedar14-libmongoc.tar.gz
  fetch ubuntu14-uuid-rt.tar.gz
  fetch ubuntu14-libmongoc-rt.tar.gz
  say Ok
  step Decompressing dependencies
  decomp cedar14-libmongoc.tar.gz
  decomp cedar14-uuid-dev.tar.gz
  decomp ubuntu14-uuid-rt.tar.gz
  decomp ubuntu14-libmongoc-rt.tar.gz
  say Ok
  step Extracting dependencies

  untar cedar14-libmongoc.tar
  untar cedar14-uuid-dev.tar
  untar_rt ubuntu14-libmongoc-rt.tar
  untar_rt ubuntu14-uuid-rt.tar
  touch $CACHE_DIR/depends_done.$SCRIPT_VER
fi
say Ok

step Installing build dependencies into build environment
rsync -Pa $CACHE_DIR/.delta/ /app/.delta/ > $BUILD_DIR/build.log || fail rsync
say Ok

step Utils
source "$BIN_DIR/utils"
say Ok
step Swiftenv
source "$BIN_DIR/steps/swiftenv"
say Ok
step Swift
source "$BIN_DIR/steps/swift"
say Ok
step Clang
source "$BIN_DIR/steps/clang"
say Ok
step Pre_Compile
source "$BIN_DIR/steps/hooks/pre_compile"
say Ok
step Swift-Build
source "$BIN_DIR/steps/swift-build"
say Ok
step Swift-Install
source "$BIN_DIR/steps/swift-install"
say Ok



step Set-env PATH
set-env PATH '$HOME/.swift-bin:$PATH'
say Ok
step Set-env LD
set-env LD_LIBRARY_PATH '$HOME/.swift-lib'

say Ok
step Post_Compile
source "$BIN_DIR/steps/hooks/post_compile"
say Ok
